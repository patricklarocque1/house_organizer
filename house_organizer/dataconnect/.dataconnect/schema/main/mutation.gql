extend type Mutation {
  """
  ✨ Insert a single `GroceryItem` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  groceryItem_insert(
    """
    Data object to insert into the table.
    """
    data: GroceryItem_Data!
  ): GroceryItem_KeyOutput! @fdc_generated(from: "GroceryItem", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `GroupHome` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  groupHome_insert(
    """
    Data object to insert into the table.
    """
    data: GroupHome_Data!
  ): GroupHome_KeyOutput! @fdc_generated(from: "GroupHome", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Notification` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  notification_insert(
    """
    Data object to insert into the table.
    """
    data: Notification_Data!
  ): Notification_KeyOutput! @fdc_generated(from: "Notification", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Task` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  task_insert(
    """
    Data object to insert into the table.
    """
    data: Task_Data!
  ): Task_KeyOutput! @fdc_generated(from: "Task", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `GroceryItem` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  groceryItem_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [GroceryItem_Data!]!
  ): [GroceryItem_KeyOutput!]! @fdc_generated(from: "GroceryItem", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `GroupHome` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  groupHome_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [GroupHome_Data!]!
  ): [GroupHome_KeyOutput!]! @fdc_generated(from: "GroupHome", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Notification` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  notification_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Notification_Data!]!
  ): [Notification_KeyOutput!]! @fdc_generated(from: "Notification", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Task` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  task_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Task_Data!]!
  ): [Task_KeyOutput!]! @fdc_generated(from: "Task", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `GroceryItem` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `GroceryItem`.
  """
  groceryItem_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: GroceryItem_Data!
  ): GroceryItem_KeyOutput! @fdc_generated(from: "GroceryItem", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `GroupHome` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `GroupHome`.
  """
  groupHome_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: GroupHome_Data!
  ): GroupHome_KeyOutput! @fdc_generated(from: "GroupHome", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Notification` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Notification`.
  """
  notification_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Notification_Data!
  ): Notification_KeyOutput! @fdc_generated(from: "Notification", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Task` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Task`.
  """
  task_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Task_Data!
  ): Task_KeyOutput! @fdc_generated(from: "Task", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `GroceryItem` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `GroceryItem`.
  """
  groceryItem_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [GroceryItem_Data!]!
  ): [GroceryItem_KeyOutput!]! @fdc_generated(from: "GroceryItem", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `GroupHome` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `GroupHome`.
  """
  groupHome_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [GroupHome_Data!]!
  ): [GroupHome_KeyOutput!]! @fdc_generated(from: "GroupHome", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Notification` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Notification`.
  """
  notification_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Notification_Data!]!
  ): [Notification_KeyOutput!]! @fdc_generated(from: "Notification", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Task` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Task`.
  """
  task_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Task_Data!]!
  ): [Task_KeyOutput!]! @fdc_generated(from: "Task", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `GroceryItem` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `GroceryItem` or `null` if not found.
  """
  groceryItem_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: GroceryItem_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: GroceryItem_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: GroceryItem_Data!
  ): GroceryItem_KeyOutput @fdc_generated(from: "GroceryItem", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `GroupHome` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `GroupHome` or `null` if not found.
  """
  groupHome_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: GroupHome_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: GroupHome_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: GroupHome_Data!
  ): GroupHome_KeyOutput @fdc_generated(from: "GroupHome", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Notification` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Notification` or `null` if not found.
  """
  notification_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Notification_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Notification_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Notification_Data!
  ): Notification_KeyOutput @fdc_generated(from: "Notification", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Task` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Task` or `null` if not found.
  """
  task_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Task_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Task_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Task_Data!
  ): Task_KeyOutput @fdc_generated(from: "Task", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `User` or `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `GroceryItem` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  groceryItem_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: GroceryItem_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: GroceryItem_Data!
  ): Int! @fdc_generated(from: "GroceryItem", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `GroupHome` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  groupHome_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: GroupHome_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: GroupHome_Data!
  ): Int! @fdc_generated(from: "GroupHome", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Notification` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  notification_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Notification_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Notification_Data!
  ): Int! @fdc_generated(from: "Notification", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Task` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  task_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Task_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Task_Data!
  ): Int! @fdc_generated(from: "Task", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `GroceryItem` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  groceryItem_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: GroceryItem_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: GroceryItem_FirstRow
  ): GroceryItem_KeyOutput @fdc_generated(from: "GroceryItem", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `GroupHome` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  groupHome_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: GroupHome_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: GroupHome_FirstRow
  ): GroupHome_KeyOutput @fdc_generated(from: "GroupHome", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Notification` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  notification_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Notification_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Notification_FirstRow
  ): Notification_KeyOutput @fdc_generated(from: "Notification", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Task` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  task_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Task_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Task_FirstRow
  ): Task_KeyOutput @fdc_generated(from: "Task", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `GroceryItem` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  groceryItem_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: GroceryItem_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "GroceryItem", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `GroupHome` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  groupHome_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: GroupHome_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "GroupHome", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Notification` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  notification_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Notification_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Notification", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Task` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  task_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Task_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Task", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
