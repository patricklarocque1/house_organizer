extend type GroceryItem {
  """
  ✨ List `Notification` objects in a one-to-many relationship (where `Notification`.`relatedGroceryItem` is this object).
  """
  notifications_on_relatedGroceryItem(
    """
    Filter condition to narrow down the query results.
    """
    where: Notification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Notification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Notification_Having
  ): [Notification!]! @fdc_generated(from: "Notification.relatedGroceryItem", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "GroceryItem", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `GroceryItem` table.
  """
  _count: Int! @fdc_generated(from: "GroceryItem", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `GroceryItem` table where the `addedByUserId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  addedByUserId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "GroceryItem.addedByUserId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `GroceryItem` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "GroceryItem.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `GroceryItem` table where the `groupHomeId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  groupHomeId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "GroceryItem.groupHomeId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `GroceryItem` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "GroceryItem.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `GroceryItem` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "GroceryItem.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `GroceryItem` table where the `notes` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  notes_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "GroceryItem.notes", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `GroceryItem` table where the `purchasedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  purchasedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "GroceryItem.purchasedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `GroceryItem` table where the `purchasedByUserId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  purchasedByUserId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "GroceryItem.purchasedByUserId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `GroceryItem` table where the `quantity` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  quantity_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "GroceryItem.quantity", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `GroceryItem` table where the `status` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  status_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "GroceryItem.status", purpose: QUERY_COUNT)
  """
  ✨ Sum the `quantity` field in the `GroceryItem` table.
  """
  quantity_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "GroceryItem.quantity", purpose: QUERY_SUM)
  """
  ✨ Average the `quantity` field in the `GroceryItem` table.
  """
  quantity_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "GroceryItem.quantity", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `GroceryItem` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "GroceryItem.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `purchasedAt` field in the `GroceryItem` table.
  """
  purchasedAt_min: Timestamp @fdc_generated(from: "GroceryItem.purchasedAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `quantity` field in the `GroceryItem` table.
  """
  quantity_min: Int @fdc_generated(from: "GroceryItem.quantity", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `GroceryItem` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "GroceryItem.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `purchasedAt` field in the `GroceryItem` table.
  """
  purchasedAt_max: Timestamp @fdc_generated(from: "GroceryItem.purchasedAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `quantity` field in the `GroceryItem` table.
  """
  quantity_max: Int @fdc_generated(from: "GroceryItem.quantity", purpose: QUERY_MAX)
}
extend type GroupHome {
  """
  ✨ List `GroceryItem` objects in a one-to-many relationship (where `GroceryItem`.`groupHome` is this object).
  """
  groceryItems_on_groupHome(
    """
    Filter condition to narrow down the query results.
    """
    where: GroceryItem_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [GroceryItem_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: GroceryItem_Having
  ): [GroceryItem!]! @fdc_generated(from: "GroceryItem.groupHome", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Task` objects in a one-to-many relationship (where `Task`.`groupHome` is this object).
  """
  tasks_on_groupHome(
    """
    Filter condition to narrow down the query results.
    """
    where: Task_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Task_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Task_Having
  ): [Task!]! @fdc_generated(from: "Task.groupHome", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `User` objects in a one-to-many relationship (where `User`.`groupHome` is this object).
  """
  users_on_groupHome(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: User_Having
  ): [User!]! @fdc_generated(from: "User.groupHome", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "GroupHome", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `GroupHome` table.
  """
  _count: Int! @fdc_generated(from: "GroupHome", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `GroupHome` table where the `address` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  address_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "GroupHome.address", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `GroupHome` table where the `adminUserId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  adminUserId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "GroupHome.adminUserId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `GroupHome` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "GroupHome.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `GroupHome` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "GroupHome.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `GroupHome` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "GroupHome.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `GroupHome` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "GroupHome.name", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `GroupHome` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "GroupHome.createdAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `GroupHome` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "GroupHome.createdAt", purpose: QUERY_MAX)
}
extend type Notification {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Notification", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Notification` table.
  """
  _count: Int! @fdc_generated(from: "Notification", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Notification` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Notification.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Notification` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Notification.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Notification` table where the `message` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  message_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Notification.message", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Notification` table where the `read` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  read_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Notification.read", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Notification` table where the `relatedGroceryItemId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  relatedGroceryItemId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Notification.relatedGroceryItemId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Notification` table where the `relatedTaskId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  relatedTaskId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Notification.relatedTaskId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Notification` table where the `type` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  type_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Notification.type", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Notification` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Notification.userId", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `Notification` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Notification.createdAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Notification` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Notification.createdAt", purpose: QUERY_MAX)
}
extend type Task {
  """
  ✨ List `Notification` objects in a one-to-many relationship (where `Notification`.`relatedTask` is this object).
  """
  notifications_on_relatedTask(
    """
    Filter condition to narrow down the query results.
    """
    where: Notification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Notification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Notification_Having
  ): [Notification!]! @fdc_generated(from: "Notification.relatedTask", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Task", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Task` table.
  """
  _count: Int! @fdc_generated(from: "Task", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Task` table where the `assignedToUserId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  assignedToUserId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Task.assignedToUserId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Task` table where the `completedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  completedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Task.completedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Task` table where the `completedByUserId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  completedByUserId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Task.completedByUserId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Task` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Task.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Task` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Task.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Task` table where the `dueDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  dueDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Task.dueDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Task` table where the `groupHomeId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  groupHomeId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Task.groupHomeId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Task` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Task.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Task` table where the `recurrence` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  recurrence_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Task.recurrence", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Task` table where the `status` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  status_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Task.status", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Task` table where the `title` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  title_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Task.title", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Task` table where the `type` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  type_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Task.type", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `completedAt` field in the `Task` table.
  """
  completedAt_min: Timestamp @fdc_generated(from: "Task.completedAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `createdAt` field in the `Task` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Task.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `dueDate` field in the `Task` table.
  """
  dueDate_min: Timestamp @fdc_generated(from: "Task.dueDate", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `completedAt` field in the `Task` table.
  """
  completedAt_max: Timestamp @fdc_generated(from: "Task.completedAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `createdAt` field in the `Task` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Task.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `dueDate` field in the `Task` table.
  """
  dueDate_max: Timestamp @fdc_generated(from: "Task.dueDate", purpose: QUERY_MAX)
}
extend type User {
  """
  ✨ List `GroceryItem` objects in a one-to-many relationship (where `GroceryItem`.`addedByUser` is this object).
  """
  groceryItems_on_addedByUser(
    """
    Filter condition to narrow down the query results.
    """
    where: GroceryItem_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [GroceryItem_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: GroceryItem_Having
  ): [GroceryItem!]! @fdc_generated(from: "GroceryItem.addedByUser", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `GroceryItem` objects in a one-to-many relationship (where `GroceryItem`.`purchasedByUser` is this object).
  """
  groceryItems_on_purchasedByUser(
    """
    Filter condition to narrow down the query results.
    """
    where: GroceryItem_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [GroceryItem_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: GroceryItem_Having
  ): [GroceryItem!]! @fdc_generated(from: "GroceryItem.purchasedByUser", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `GroupHome` objects in a one-to-many relationship (where `GroupHome`.`adminUser` is this object).
  """
  groupHomes_on_adminUser(
    """
    Filter condition to narrow down the query results.
    """
    where: GroupHome_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [GroupHome_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: GroupHome_Having
  ): [GroupHome!]! @fdc_generated(from: "GroupHome.adminUser", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Notification` objects in a one-to-many relationship (where `Notification`.`user` is this object).
  """
  notifications_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Notification_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Notification_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Notification_Having
  ): [Notification!]! @fdc_generated(from: "Notification.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Task` objects in a one-to-many relationship (where `Task`.`assignedToUser` is this object).
  """
  tasks_on_assignedToUser(
    """
    Filter condition to narrow down the query results.
    """
    where: Task_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Task_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Task_Having
  ): [Task!]! @fdc_generated(from: "Task.assignedToUser", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Task` objects in a one-to-many relationship (where `Task`.`completedByUser` is this object).
  """
  tasks_on_completedByUser(
    """
    Filter condition to narrow down the query results.
    """
    where: Task_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Task_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Task_Having
  ): [Task!]! @fdc_generated(from: "Task.completedByUser", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "User", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `User` table.
  """
  _count: Int! @fdc_generated(from: "User", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `displayName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  displayName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.displayName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `email` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  email_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.email", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `groupHomeId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  groupHomeId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.groupHomeId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `photoUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  photoUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.photoUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `role` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  role_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.role", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `User` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `User` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MAX)
}
